#! /usr/bin/env bash


basename=$(basename "$0")


function usage {
  cat <<USAGE
$basename - Convert Markdown to various formats using Pandoc

usage:
  $basename OUTPUT_FORMAT MARKDOWN_DOCUMENT

OUTPUT_FORMAT is one of: html, pdf

The new file will be in the same directory and named just like the
Markdown file with the appropriate extension.

Note, on Arch Linux, creating PDFs this way required the installation
of texlive-core and texlive-bin

If you are ultimately trying to print a Markdown document, use the pdf output
format and then:

    $ lpr file-this-script-created.pdf

v1.2  2025-02-16  Dino Morelli <dino@ui3.info>

USAGE
}


# arg parsing

if [ $# -lt 2 ]
then
  echo "ERROR: Missing required arguments"
  usage
  exit 1
fi

format="$1"
infile="$2"
switches=("--standalone")

# These bash expressions to parse paths are weird/ugly/arcane, let's just
# assign them to nice variables here.
filename="${infile%.*}"
extension="${infile##*.}"
# echo "filename=${filename}"
# exit 2

while true ; do
  case "$format" in
    html)
      switches+=("--metadata title=")
      switches+=("--variable pagetitle:${filename}")
      switches+=("--metadata lang=en-US")
      break;;
    pdf)
      switches+=("--variable=geometry:margin=1cm")
      break;;
    *)
      echo "ERROR: Unknown format"
      usage
      exit 1
      break;;
  esac
done

outfile="${filename}.$format"

# Special 'from' handling for Literate Haskell source code with Markdown
[[ "${extension}" == "lhs" ]] && switches+=("--from=markdown+lhs")

set -x
# These checks are for whitespace, globbing and quoting. We want the whitespace
# in this expanded array.
# shellcheck disable=SC2048 disable=SC2086
pandoc ${switches[*]} --output "$outfile" "$infile"
