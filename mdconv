#! /usr/bin/env bash


basename=$(basename "$0")


usage=$(cat <<USAGE
Convert Markdown to various formats using Pandoc

usage:
  $basename [OPTIONS] OUTPUT_FORMAT MARKDOWN_DOCUMENT

options:
  --header FILE     Optional header to be included, see HEADER below
  -m, --margin STR  Specify PDF margin measurement. Examples: '2cm' '1mm'. Default: '1cm'
  -h, --help        This help information

OUTPUT_FORMAT is one of: html, pdf

The new file will be in the same directory and named just like the
Markdown file with the appropriate extension.

Note, on Arch Linux, creating PDFs this way requires the installation
of texlive-core and texlive-bin

If you are ultimately trying to print a Markdown document, use the pdf output
format and then:

    $ lpr file-this-script-created.pdf

HEADER

When used with html this is often for adding CSS styles via the
--include-in-header pandoc switch.

When used with pdf this is often for adding a header-includes section to the
Markdown before pandoc processing, also for styling.

example HTML CSS header

    <style type="text/css">
    h1, h2, h3, h4 {
       font-family: Sans-Serif;
    }

    h3 {
       margin-bottom: 0.2em;
    }

    h3 + h4 {
       margin-top: 0.2em;
    }
    </style>

example PDF header (include the hyphen lines in your file, they're significant in Markdown)

    ---
    header-includes:
      - \\AtBeginDocument {
          \\hypersetup {
            colorlinks=false,
            allbordercolors={0 0 0},
            pdfborderstyle={/S/U/W 1}
          }
        }
    ---

v1.2  2025-02-16  Dino Morelli <dino@ui3.info>

USAGE
)


warn () {
  echo "$basename:" "$@" >&2
}


die () {
  rc="$1"
  shift
  warn "$@"
  exit "$rc"
}


# arg parsing

getoptResults=$(getopt --options m:h --longoptions header:,margin:,help --name "$basename" -- "$@") \
  || die 1 "$usage"

# Note the quotes around "$getoptResults": they are essential!
eval set -- "$getoptResults"

optMargin="1cm"
unset optHeader
optHelp=false

while true ; do
  case "$1" in
    --header) optHeader="$2"; shift 2;;
    -m|--margin) optMargin="$2"; shift 2;;
    -h|--help) optHelp=true; shift;;
    --) shift; break;;
  esac
done

$optHelp && die 0 "$usage"

if [ $# -lt 2 ]
then
  warn "Incorrect number of ITEMs"
  die 1 "$usage"
fi

format="$1"
infile="$2"
switches=("--standalone")

# These bash expressions to parse paths are weird/ugly/arcane, let's just
# assign them to nice variables here.
filename="${infile%.*}"
extension="${infile##*.}"

outfile="${filename}.$format"

# Special 'from' handling for Literate Haskell source code with Markdown
[[ "${extension}" == "lhs" ]] && switches+=("--from=markdown+lhs")

while true ; do
  case "$format" in
    html)
      switches+=("--metadata title=")
      switches+=("--variable pagetitle:${filename}")
      switches+=("--metadata lang=en-US")
      if [ "$optHeader" ]
      then
        switches+=("--include-in-header=${optHeader}")
        unset optHeader
      fi
      break;;
    pdf)
      switches+=("--variable geometry:margin=${optMargin}")
      break;;
    *)
      warn "ERROR: Unknown format"
      die 1 "$usage"
      break;;
  esac
done

set -x
# These checks are for whitespace, globbing and quoting. We want the whitespace
# in this expanded array.
# shellcheck disable=SC2048 disable=SC2086
cat $optHeader ${infile} | pandoc ${switches[*]} --output "$outfile"
