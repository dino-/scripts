#! /bin/bash


basename=$(basename "$0")

# This is the interval set in mbsync.timer
# Change it here if it's changed there.
timerInterval="10"


usage=$(cat <<USAGE
Control mbsync service and timer

usage:
  $basename [OPTIONS] COMMAND

options:
  -h, --help       This help information

commands:

  status   Status of the mbsync timer, including how long until the next run
  sync     Synchronize mail now by starting the mbsync.service
  start    Start mbsync.timer
  stop     Stop mbsync.timer
  restart  Execute a 'systemctl --user daemon-reload' and restart mbsync.timer
           Useful when editing the timer and service unit files
  log      Display the log from the last $timerInterval minutes

log is performing this command:

  journalctl --user -u mbsync --since "$timerInterval minutes ago"

v1.3  2020-11-05  Dino Morelli <dino@ui3.info>

USAGE
)


warn () {
  echo "$basename:" "$@" >&2
}


die () {
  rc="$1"
  shift
  warn "$@"
  exit "$rc"
}


# arg parsing

getoptResults=$(getopt -o h --long help -n "$basename" -- "$@") \
  || die 1 "$usage"

# Note the quotes around "$getoptResults": they are essential!
eval set -- "$getoptResults"

optHelp=false

while true ; do
  case "$1" in
    -h|--help) optHelp=true; shift;;
    --) shift; break;;
  esac
done

$optHelp && die 0 "$usage"

if [ $# -ne 1 ]
then
  warn "COMMAND should be exactly one argument"
  die 1 "$usage"
fi

command=$1
shift

case "$command" in
  status)
    set -x
    systemctl --user --no-pager status mbsync.timer
    systemctl --user --no-pager list-timers mbsync.timer;;
  sync)    set -x; systemctl --user start mbsync;;
  start)   set -x; systemctl --user start mbsync.timer;;
  stop)    set -x; systemctl --user stop  mbsync.timer;;
  restart) set -x;
    systemctl --user daemon-reload
    systemctl --user restart mbsync.timer;;
  log)     set -x; journalctl --user -u mbsync --since "$timerInterval minutes ago";;
  *)
    warn "Invalid command: $command"
    die 1 "$usage";;
esac
