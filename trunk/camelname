#! /usr/bin/perl

#--------------------------------------------------------------------------
# $RCSfile$
#--------------------------------------------------------------------------
# $Revision: 8 $
# $Date: 2004-03-15 12:02:27 -0500 (Mon, 15 Mar 2004) $
# $Author: dmorelli $
#
# Takes a filename with spaces and camel-cases it.
#--------------------------------------------------------------------------

use File::Copy;
use Getopt::Std;


#--------------------------------------------------------------------------
sub displayUsage()
{
	print "camelname - Rename files with camel case\n";
	print "version 1.0.0\n";
	print "usage:\n";
	print "   camelname [-c \"char to replace, default: space\"] files...\n";
	print "   camelname --help\n";
	print "   camelname --version\n";
}  # sub displayUsage


#--------------------------------------------------------------------------
# Detect if no params given.
if(@ARGV == 0 || @ARGV[0] eq "--help" || @ARGV[0] eq "--version")
{
	displayUsage();
	exit;
}

# Parse arguments.
$opt_c = " ";
getopts("-c:");

for $current (@ARGV) { changeName($current); }

sub changeName($)
{
	my $oldfile = shift;
	my $newfile;

	# Create an array of the characters.
	@chars = split(//, $oldfile);

	# Loop through the chars, building the new name.
	for($i = 0; $i < @chars; $i++)
	{
		$c = $chars[$i];
		#if($c eq " ")
		if($c eq $opt_c)
		{
			$newfile = $newfile . "\U$chars[++$i]";
		}
		else
		{
			$newfile = $newfile . $c;
		}
	}

	# Same name, no change needed.
	if($oldfile eq $newfile)
	{
		print "No change needed for $oldfile\n";
		return;
	}

	# Check for file already exists. DO NOT OVERWRITE.
	if(-e $newfile)
	{
		print "File $newfile already exists! Aborting!\n";
		return;
	}

	print "\"$oldfile\" -> $newfile\n";
	move($oldfile, $newfile);
}  # sub rename

