--
Migration from svn to darcs

- Need to do a general clean-up here, remove scripts that are useless.

- Remove the header comments. darcs has no use for this


--
Need to pull out the binary search code in musicUtil/mkplaylist and put it here somewhere. Also, needs to be prototyped more like sort() and take a coderef for the comparison.


--
Perl script for backup spanning

-Can Perl see the media type/size?

+Can Perl eject it? Yes, see below.

-Build path list to all dirs, sorted.

-Then calculate sizes and where divisions will occur.

-cli tool called eject

-Will growisofs work on a CD-R? No, use mkisofs redirected to cdrecord?


--
*new backup script* for getting CD ISOs ready:

-On yakuza, and as root:

-Archive latest in $CVSROOT and cp to /archive/backup/wasabi/home/dmorelli/temp

-tar, split, rm tar

-mkisofs each split, rm as you go

-scp to wasabi

-burn


--
cdburn

-I'd like it to do both data CDs and CD-DA with cdrdao. Based on the file extension? .iso or .toc

-Change this to use strict and also make the docs use the $opt_* vars.

-Need to add overburn support. Here are the switches:
    $ cdrecord driveropts=burnfree -sao -overburn dev=/dev/hdc foo.iso

-Maybe take out the default 24x and make it not specify at all? This would handle future faster drives without adjustment.


--
cputemp

+ Add timestamp output when called


--
imgname

-Usage from older Java imgname tool:
$ ./imgname --help
Error: User requested help

Usage: imgname [-r ] [-o ] [-q ] [-n ] [--version ] [--help ] [<String>]

        -r 'Process files recursively'  Default: false
        -o 'Overwrite existing files'  Default: false
        -q 'Quiet, don't display anything while processing.'  Default: false
        -n 'Process images even if they are missing EXIF info.'  Default: false
        --version 'Display app version to console'  Default: false
        --help 'Display this usage information'  Default: false
        '<dir> or <file> to process'  Default: .


--
megawho

- Add info in usage: Please don't be a jerk with mega hits to whois services.


--
newperl

-Update usage notes to explain how to make modules in subdirs with the paths, like this:
	newperl Foo/Bar.pm

	Will create a file Foo/Bar.pm with package Foo::Bar; in it

+Make new modules have 'use strict;'

-Add switch to specify whether you want this:
    #! /usr/bin/perl -w

 or this:
    use warnings;


--
relpath

-Switch to not preserve comment lines


--
routerReset

-Possibly add logging of when this is called.


--
xgo.hs

   - Decouple the data about what hardware to look for (identifiers) from the script. New file in /etc perhaps


   -----
   2007-07-08 rewrite

   What happens now:

   - locchk (actually was named locCheck) is supposed to be installed in /etc/init.d/. Runs at boot to detect our location.

      - Determines laptop location based on looking for the USB keyboard (or KVM)

      - Checks to see if it can find the mouse, which has been a known problem in the past.

      - Writes these things to a file: /var/tmp/locCheck

   - xgo script is used to call startx for us

      - Processes args

      - If suppress start-up was specified, export that as XGOSUPPRESS=1

         - This is for .xsession

      - Was a profile requested?

         - No: check the file from locchk, set the profile from that

         - Yes: Validate it's a known profile

      - Was no-action specified?

         - Yes: Show what would have been done.

         - No: exec startx with proper layout

   -----
   todo

   - Check for running X server, do not run again. How do we do this?

      $ pgrep X

      And check for 0 exit code (success)

   - Need to add the location searching stuff, but make it store results in the environment like suppress stuff.

   - Add default behavior of cd into user's home directory prior to starting X, with a switch to suppress this behavior as well.


   -----
   pass environment around like this:

      #! /usr/bin/runhaskell

      module Main where

      import System.Posix.Env ( putEnv )
      import System.Process ( runCommand )


      main = do
         putEnv "FOO=1"
         runCommand "echo $FOO"

   New script will need to symlink the image in ~/artwork/desktop-art/

   -----
   Stuff for figuring out docked status, not used at this time:


   keyboards :: [String]
   keyboards =
      [ "Justcom Technology"  -- Raritan KVM switch
      , "CHESEN"              -- USB to PS/2 adapter
      ]
   keyboards2 =
      [ "CHESEN"
      , "Justcom Technology"
      ]
   keyboards3 =
      [ "CHESEN"
      , "fuck"
      ]


   searchKeyboard :: String -> Bool
   searchKeyboard devs = any match keyboards
      where
         match :: String -> Bool
         match keyboard =
            case (matchRegex (mkRegex keyboard) devs) of
                  Nothing -> False
                  _       -> True


--
xslt

+Change the usage to use Basename


--
general notes

-All apps should check for binary dependencies like cdlabelgen, vorbiscomment, etc

-Change all scripts to use here document for usage notes


--
scripts going public

Candidates for this:
- alldl
- killblanks
- megawho
- newperl
- pwgen
- relpath
- rren
- te
- timestamp
- uptrunk
- xmlformat

These scripts slated for public release need some things:
   - Author email address
   - Version number
   - Uniform and comprehensive help
   - More idiot-proofing with args
   - GPL licensing

Perhaps a Makefile will be necessary for the whole scripts rep to package public scripts. Targets for individual scripts.

Info on how to write man pages in `man pod2man`
