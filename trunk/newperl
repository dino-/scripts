#! /usr/bin/perl -w

#--------------------------------------------------------------------------
# $RCSfile$
#--------------------------------------------------------------------------
# $Revision: 42 $
# $Date: 2004-07-28 09:23:11 -0400 (Wed, 28 Jul 2004) $
# $Author: dmorelli $
#
# Create a new Perl script or module file
#--------------------------------------------------------------------------

use strict;
use File::Basename;
use File::Path;
use Getopt::Std;


our $opt_f;
my ($fullPath, $path, $suffix);


#--------------------------------------------------------------------------
# It all starts here

# Detect if no params given
if(@ARGV == 0 || $ARGV[0] eq "--help") {
	print "$0 - Create a new Perl script or module file\n";
	print "version 1.0.0  Dino Morelli  dmorelli\@reactorweb.net\n";
	print "\nusage:\n";
	print "   $0 [-f] file\n";
	print "   $0 --help\n";
	print "\nswitches:\n";
	print "   -f      Force overwrite existing file\n";
	print "   --help  This information.\n";
	exit;
}

# Parse arguments
getopts("f");
$fullPath = shift;

(undef, $path, $suffix) = fileparse($fullPath, "\.pm");

mkpath($path, 1) if(! -e $path);

# Existing file?
die "File $fullPath exists!\n" if(!$opt_f && -e $fullPath);

if ($suffix && ($suffix eq ".pm")) {  # Set up new Perl module
	# Make the package from the path
	my $package = $fullPath;
	$package =~ s|/|::|g;
	$package =~ s|\.pm||;

	# Create the file
	open (OUTFILE, ">$fullPath") or die "Can't open $fullPath: $!\n";
	print OUTFILE "package $package;\n\n";
	print OUTFILE "1;\n";
	close (OUTFILE);
} else {  # Set up new Perl binary
	# Locate where perl is on this system
	chomp(my $perlPath = qx/which perl/);

	# Create the file
	open (OUTFILE, ">$fullPath") or die "Can't open $fullPath: $!\n";
	print OUTFILE "#! $perlPath -w\n";
	print OUTFILE "\nuse strict;\n";
	close (OUTFILE);

	# Make the file executable
	print qx/chmod +x $fullPath/;
}

print "file $fullPath created\n";
