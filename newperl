#! /usr/bin/perl -w

#--------------------------------------------------------------------------
# $HeadURL: file:///var/lib/svn/scripts/newperl $
#--------------------------------------------------------------------------
# $Revision: 164 $
# $Date: 2005-11-05 15:16:02 -0500 (Sat, 05 Nov 2005) $
# $Author: dmorelli $
#
# Create a new Perl script or module file
#--------------------------------------------------------------------------

use strict;
use File::Basename;
use File::Path;
use Getopt::Std;


our $opt_f;
my ($fullPath, $path, $suffix);


#--------------------------------------------------------------------------
# It all starts here

# Detect if no params given
if(@ARGV == 0 || $ARGV[0] eq "--help") {
	print <<USAGE;
$0 - Create a new Perl script or module file
version 1.2.1  Dino Morelli  dino\@ui3.info

usage:
   $0 [-f] file
   $0 --help

switches:
   -f      Force overwrite existing file
   --help  This information.
USAGE
	exit;
}

# Parse arguments
getopts("f");
$fullPath = shift;

(undef, $path, $suffix) = fileparse($fullPath, '\..*');

mkpath($path, 1) if(! -e $path);

# Existing file?
die "File $fullPath exists!\n" if(!$opt_f && -e $fullPath);

if ($suffix && ($suffix =~ m|.p[lm]|)) {  # Set up new Perl library/module
	# Make the package from the path
	my $package = $fullPath;
	$package =~ s|/|::|g;
	$package =~ s|\.pm||;

	# Create the file
	open (OUTFILE, ">$fullPath") or die "Can't open $fullPath: $!\n";
	print OUTFILE "package $package;\n";
	print OUTFILE "\nuse strict;\n\n";
	print OUTFILE "1;\n";
	close (OUTFILE);
} else {  # Set up new Perl binary
	# Locate where perl is on this system
	chomp(my $perlPath = qx/which perl/);

	# Create the file
	open (OUTFILE, ">$fullPath") or die "Can't open $fullPath: $!\n";
	print OUTFILE "#! $perlPath -w\n";
	print OUTFILE "\nuse strict;\n\n";
	close (OUTFILE);

	# Make the file executable
	print qx/chmod +x $fullPath/;
}

print "file $fullPath created\n";
