#! /usr/bin/perl -w

#--------------------------------------------------------------------------
# $RCSfile$
#--------------------------------------------------------------------------
# $Revision: 66 $
# $Date: 2005-01-14 11:06:07 -0500 (Fri, 14 Jan 2005) $
# $Author: dmorelli $
#
# Find things in multiple jar files
#--------------------------------------------------------------------------

use strict;
use File::Find;
use Getopt::Std;


# If we can, make sure the jar utility is present
# for OS name strings see: perldoc perlport
unless($^O =~ /dos|os2|MSWin32/) {
	`whereis jar` =~ /.*:.+/ or die
		"No jar utility found using Unix-style whereis utility.$/" .
		"Maybe you don't have Java installed.$/";
}

our ($opt_d);
my $usage = <<EOF;
$0 - Find things in multiple jar files

usage: $0 [-d depth] startingDir searchString
       $0 --help

options:
   -d      Depth to descent from the starting dir, default: no restriction
   --help  This help information
EOF

# No args or user requested help
(!@ARGV || $ARGV[0] eq '--help') and die "$usage$/";

# Parse args
getopts('d:');
$opt_d ||= 0;
my ($dir, $query) = @ARGV;
(!$dir || !$query) and die "Missing args!$/$usage$/";

my $baseDepth = $dir =~ tr|/|/|;


# The work happens here, the find below calls this for every file/dir
# it finds
sub wanted {
	# Only jar files
	return unless /\.jar$/;

	# Only files at or above the specified depth
	if ($opt_d) {
		my $curDepth = $File::Find::name =~ tr|/|/|;
		return if $curDepth - $baseDepth > $opt_d;
	}

	# So the user knows that we're doing something
	print ".";

	# Search through the contents of the jar
	my $result = `jar tvf $_ | grep "$query"`;

	# Output grep's results if it was successful
	print "$/$File::Find::name$/$result" if $result;
}

find
	{
		wanted => \&wanted,
		follow => 1,  # Follow symlinks
	},
	$dir;
print "$/";
