#! /usr/bin/perl -w

#--------------------------------------------------------------------------
# $HeadURL$
#--------------------------------------------------------------------------
# $Revision: 140 $
# $Date: 2005-09-12 10:40:33 -0400 (Mon, 12 Sep 2005) $
# $Author: dmorelli $
#
# Random password generator
#--------------------------------------------------------------------------

use strict;
use File::Basename;
use Getopt::Std;


our ($opt_l, $opt_t);
my $count;
my @chars = ();
my $password;
my ($basename) = fileparse $0;


if(@ARGV && $ARGV[0] eq '--help') {
    print <<USAGE;
$basename - Random password generator

usage:  $basename [-l length] [-t types] [count]
        $basename --help

options:
  -l      Individual password length. Default: 8
  -t      Char types to include in the passwords. Default: aAd
          a - a..z (lowercase alpha)
          A - A..Z (uppercase alpha)
          d - 0..9 (digits)
          p - Punctuation: -=[]\\;/~@\$\%^&*_+:?<>{}()#
  count   Number of passwords to generate
  --help  This help information
USAGE
    exit;
}

# Seed the random number generator
srand(time ^ $$ ^ unpack "%L*", `ps auxww | gzip`);

# Process the args
getopts('l:t:');
$opt_l ||= 8;
$opt_t ||= 'aAd';
$count = shift || 10;

# Construct the array of chars to be used
my %type = map { $_, 1 } split (//, $opt_t);
push(@chars, 'a' .. 'z') if $type{a};
push(@chars, 'A' .. 'Z') if $type{A};
push(@chars, '0' .. '9') if $type{d};
push(@chars, qw|- = [ ] \ ; / ~ @ $ % ^ & * _ + : ? < > { } ( )|, '#') 
    if $type{p};

# Generate and display the passwords
for (1 .. $count) {
    $password = join("", @chars[ map { rand @chars } ( 1 .. $opt_l ) ]);
    print "$password\n";
}
